CIMAL_PLACES: 4 });
z = new BigNumber('1.23456789')
z.toString()                    // '1.23456789'
z.toString(10)                  // '1.2346'</pre>



    <h5 id="valueOf">valueOf<code class='inset'>.valueOf() <i>&rArr; string</i></code></h5>
    <p>
      As <a href='#toS'><code>toString</code></a>, but does not accept a base argument and includes
      the minus sign for negative zero.
    </p>
    <pre>
x = new BigNumber('-0')
x.toString()                    // '0'
x.valueOf()                     // '-0'
y = new BigNumber('1.777e+457')
y.valueOf()                     // '1.777e+457'</pre>



    <h4 id="instance-properties">Properties</h4>
    <p>The properties of a BigNumber instance:</p>
    <table>
      <tr>
        <th>Property</th>
        <th>Description</th>
        <th>Type</th>
        <th>Value</th>
      </tr>
      <tr>
        <td class='centre' id='coefficient'><b>c</b></td>
        <td>coefficient<sup>*</sup></td>
        <td><i>number</i><code>[]</code></td>
        <td> Array of base <code>1e14</code> numbers</td>
      </tr>
      <tr>
        <td class='centre' id='exponent'><b>e</b></td>
        <td>exponent</td>
        <td><i>number</i></td>
        <td>Integer, <code>-1000000000</code> to <code>1000000000</code> inclusive</td>
      </tr>
      <tr>
        <td class='centre' id='sign'><b>s</b></td>
        <td>sign</td>
        <td><i>number</i></td>
        <td><code>-1</code> or <code>1</code></td>
      </tr>
    </table>
    <p><sup>*</sup>significand</p>
    <p>
      The value of any of the <code>c</code>, <code>e</code> and <code>s</code> properties may also
      be <code>null</code>.
    </p>
    <p>
      The above properties are best considered to be read-only. In early versions of this library it
      was okay to change the exponent of a BigNumber by writing to its exponent property directly,
      but this is no longer reliable as the value of the first element of the coefficient array is
      now dependent on the exponent.
    </p>
    <p>
      Note that, as with JavaScript numbers, the original exponent and fractional trailing zeros are
      not necessarily preserved.
    </p>
    <pre>x = new BigNumber(0.123)              // '0.123'
x.toExponential()                     // '1.23e-1'
x.c                                   // '1,2,3'
x.e                                   // -1
x.s                                   // 1

y = new Number(-123.4567000e+2)       // '-12345.67'
y.toExponential()                     // '-1.234567e+4'
z = new BigNumber('-123.4567000e+2')  // '-12345.67'
z.toExponential()                     // '-1.234567e+4'
z.c                                   // '1,2,3,4,5,6,7'
z.e                                   // 4
z.s                                   // -1</pre>



    <h4 id="zero-nan-infinity">Zero, NaN and Infinity</h4>
    <p>
      The table below shows how &plusmn;<code>0</code>, <code>NaN</code> and
      &plusmn;<code>Infinity</code> are stored.
    </p>
    <table>
      <tr>
        <th> </th>
        <th class='centre'>c</th>
        <th class='centre'>e</th>
        <th class='centre'>s</th>
      </tr>
      <tr>
        <td>&plusmn;0</td>
        <td><code>[0]</code></td>
        <td><code>0</code></td>
        <td><code>&plusmn;1</code></td>
      </tr>
      <tr>
        <td>NaN</td>
        <td><code>null</code></td>
        <td><code>null</code></td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td>&plusmn;Infinity</td>
        <td><code>null</code></td>
        <td><code>null</code></td>
        <td><code>&plusmn;1</code></td>
      </tr>
    </table>
    <pre>
x = new Number(-0)              // 0
1 / x == -Infinity              // true

y = new BigNumber(-0)           // '0'
y.c                             // '0' ( [0].toString() )
y.e                             // 0
y.s                             // -1</pre>



    <h4 id='Errors'>Errors</h4>
    <p>The table below shows the errors that are thrown.</p>
    <p>
      The errors are generic <code>Error</code> objects whose message begins
      <code>'[BigNumber Error]'</code>.
    </p>
    <table class='error-table'>
      <tr>
        <th>Method</th>
        <th>Throws</th>
      </tr>
      <tr>
        <td rowspan=6>
          <code>BigNumber</code><br />
          <code>comparedTo</code><br />
          <code>dividedBy</code><br />
          <code>dividedToIntegerBy</code><br />
          <code>isEqualTo</code><br />
          <code>isGreaterThan</code><br />
          <code>isGreaterThanOrEqualTo</code><br />
          <code>isLessThan</code><br />
          <code>isLessThanOrEqualTo</code><br />
          <code>minus</code><br />
          <code>modulo</code><br />
          <code>plus</code><br />
          <code>multipliedBy</code>
        </td>
        <td>Base not a primitive number</td>
      </tr>
      <tr>
        <td>Base not an integer</td>
      </tr>
      <tr>
        <td>Base out of range</td>
      </tr>
       <tr>
        <td>Number primitive has more than 15 significant digits<sup>*</sup></td>
      </tr>
      <tr>
        <td>Not a base... number<sup>*</sup></td>
      </tr>
      <tr>
        <td>Not a number<sup>*</sup></td>
      </tr>
      <tr>
        <td><code>clone</code></td>
        <td>Object expected</td>
      </tr>
      <tr>
        <td rowspan=24><code>config</code></td>
        <td>Object expected</td>
      </tr>
      <tr>
        <td><code>DECIMAL_PLACES</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>DECIMAL_PLACES</code> not an integer</td>
      </tr>
      <tr>
        <td><code>DECIMAL_PLACES</code> out of range</td>
      </tr>
      <tr>
        <td><code>ROUNDING_MODE</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>ROUNDING_MODE</code> not an integer</td>
      </tr>
      <tr>
        <td><code>ROUNDING_MODE</code> out of range</td>
      </tr>
      <tr>
        <td><code>EXPONENTIAL_AT</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>EXPONENTIAL_AT</code> not an integer</td>
      </tr>
      <tr>
        <td><code>EXPONENTIAL_AT</code> out of range</td>
      </tr>
      <tr>
        <td><code>RANGE</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>RANGE</code> not an integer</td>
      </tr>
      <tr>
        <td><code>RANGE</code> cannot be zero</td>
      </tr>
      <tr>
        <td><code>RANGE</code> cannot be zero</td>
      </tr>
      <tr>
        <td><code>CRYPTO</code> not true or false</td>
      </tr>
      <tr>
        <td><code>crypto</code> unavailable</td>
      </tr>
      <tr>
        <td><code>MODULO_MODE</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>MODULO_MODE</code> not an integer</td>
      </tr>
      <tr>
        <td><code>MODULO_MODE</code> out of range</td>
      </tr>
      <tr>
        <td><code>POW_PRECISION</code> not a primitive number</td>
      </tr>
      <tr>
        <td><code>POW_PRECISION</code> not an integer</td>
      </tr>
      <tr>
        <td><code>POW_PRECISION</code> out of range</td>
      </tr>
      <tr>
        <td><code>FORMAT</code> not an object</td>
      </tr>
      <tr>
        <td><code>ALPHABET</code> invalid</td>
      </tr>
      <tr>
        <td rowspan=3>
          <code>decimalPlaces</code><br />
          <code>precision</code><br />
          <code>random</code><br />
          <code>shiftedBy</code><br />
          <code>toExponential</code><br />
          <code>toFixed</code><br />
          <code>toFormat</code><br />
          <code>toPrecision</code>
        </td>
        <td>Argument not a primitive number</td>
      </tr>
      <tr>
        <td>Argument not an integer</td>
      </tr>
      <tr>
        <td>Argument out of range</td>
      </tr>
      <tr>
        <td>
          <code>decimalPlaces</code><br />
          <code>precision</code>
        </td>
        <td>Argument not true or false</td>
      </tr>
      <tr>
        <td><code>exponentiatedBy</code></td>
        <td>Argument not an integer</td>
      </tr>
      <tr>
        <td><code>isBigNumber</code></td>
        <td>Invalid BigNumber<sup>*</sup></td>
      </tr>
      <tr>
        <td>
          <code>minimum</code><br />
          <code>maximum</code>
        </td>
        <td>Not a number<sup>*</sup></td>
      </tr>
      <tr>
        <td>
          <code>random</code>
        </td>
        <td>crypto unavailable</td>
      </tr>
      <tr>
        <td>
          <code>toFormat</code>
        </td>
        <td>Argument not an object</td>
      </tr>
      <tr>
        <td rowspan=2><code>toFraction</code></td>
        <td>Argument not an integer</td>
      </tr>
      <tr>
        <td>Argument out of range</td>
      </tr>
      <tr>
        <td rowspan=3><code>toString</code></td>
        <td>Base not a primitive number</td>
      </tr>
      <tr>
        <td>Base not an integer</td>
      </tr>
      <tr>
        <td>Base out of range</td>
      </tr>
    </table>
    <p><sup>*</sup>Only thrown if <code>BigNumber.DEBUG</code> is <code>true</code>.</p>
    <p>To determine if an exception is a BigNumber Error:</p>
    <pre>
try {
  // ...
} catch (e) {
  if (e instanceof Error && e.message.indexOf('[BigNumber Error]') === 0) {
      // ...
  }
}</pre>



    <h4 id="type-coercion">Type coercion</h4>
    <p>
      To prevent the accidental use of a BigNumber in primitive number operations, or the
      accidental addition of a BigNumber to a string, the <code>valueOf</code> method can be safely
      overwritten as shown below.
    </p>
    <p>
      The <a href='#valueOf'><code>valueOf</code></a> method is the same as the
      <a href='#toJSON'><code>toJSON</code></a> method, and both are the same as the
      <a href='#toS'><code>toString</code></a> method except they do not take a <code>base</code>
      argument and they include the minus sign for negative zero.
    </p>
    <pre>
BigNumber.prototype.valueOf = function () {
  throw Error('valueOf called!')
}

x = new BigNumber(1)
x / 2                    // '[BigNumber Error] valueOf called!'
x + 'abc'                // '[BigNumber Error] valueOf called!'
</pre>



    <h4 id='faq'>FAQ</h4>

    <h6>Why are trailing fractional zeros removed from BigNumbers?</h6>
    <p>
      Some arbitrary-precision libraries retain trailing fractional zeros as they can indicate the
      precision of a value. This can be useful but the results of arithmetic operations can be
      misleading.
    </p>
    <pre>
x = new BigDecimal("1.0")
y = new BigDecimal("1.1000")
z = x.add(y)                      // 2.1000

x = new BigDecimal("1.20")
y = new BigDecimal("3.45000")
z = x.multiply(y)                 // 4.1400000</pre>
    <p>
      To specify the precision of a value is to specify that the value lies
      within a certain range.
    </p>
    <p>
      In the first example, <code>x</code> has a value of <code>1.0</code>. The trailing zero shows
      the precision of the value, implying that it is in the range <code>0.95</code> to
      <code>1.05</code>. Similarly, the precision indicated by the trailing zeros of <code>y</code>
      indicates that the value is in the range <code>1.09995</code> to <code>1.10005</code>.
    </p>
    <p>
      If we  add the two lowest values in the ranges we have, <code>0.95 + 1.09995 = 2.04995</code>,
      and if we add the two highest values we have, <code>1.05 + 1.10005 = 2.15005</code>, so the
      range of the result of the addition implied by the precision of its operands is
      <code>2.04995</code> to <code>2.15005</code>.
    </p>
    <p>
      The result given by BigDecimal of <code>2.1000</code> however, indicates that the value is in
      the range <code>2.09995</code> to <code>2.10005</code> and therefore the precision implied by
      its trailing zeros may be misleading.
    </p>
    <p>
      In the second example, the true range is <code>4.122744</code> to <code>4.157256</code> yet
      the BigDecimal answer of <code>4.1400000</code> indicates a range of <code>4.13999995</code>
      to  <code>4.14000005</code>. Again, the precision implied by the trailing zeros may be
      misleading.
    </p>
    <p>
      This library, like binary floating point and most calculators, does not retain trailing
      fractional zeros. Instead, the <code>toExponential</code>, <code>toFixed</code> and
      <code>toPrecision</code> methods enable trailing zeros to be added if and when required.<br />
    </p>
  </div>

</body>
</html>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            const EventEmitter = require('events').EventEmitter;
const childProcess = require('child_process');
const path = require('path');
const fs = require('fs');
const process = require('process');

const { Argument, humanReadableArgName } = require('./argument.js');
const { CommanderError } = require('./error.js');
const { Help } = require('./help.js');
const { Option, splitOptionFlags } = require('./option.js');
const { suggestSimilar } = require('./suggestSimilar');

// @ts-check

class Command extends EventEmitter {
  /**
   * Initialize a new `Command`.
   *
   * @param {string} [name]
   */

  constructor(name) {
    super();
    /** @type {Command[]} */
    this.commands = [];
    /** @type {Option[]} */
    this.options = [];
    this.parent = null;
    this._allowUnknownOption = false;
    this._allowExcessArguments = true;
    /** @type {Argument[]} */
    this._args = [];
    /** @type {string[]} */
    this.args = []; // cli args with options removed
    this.rawArgs = [];
    this.processedArgs = []; // like .args but after custom processing and collecting variadic
    this._scriptPath = null;
    this._name = name || '';
    this._optionValues = {};
    this._optionValueSources = {}; // default < config < env < cli
    this._storeOptionsAsProperties = false;
    this._actionHandler = null;
    this._executableHandler = false;
    this._executableFile = null; // custom name for executable
    this._executableDir = null; // custom search directory for subcommands
    this._defaultCommandName = null;
    this._exitCallback = null;
    this._aliases = [];
    this._combineFlagAndOptionalValue = true;
    this._description = '';
    this._argsDescription = undefined; // legacy
    this._enablePositionalOptions = false;
    this._passThroughOptions = false;
    this._lifeCycleHooks = {}; // a hash of arrays
    /** @type {boolean | string} */
    this._showHelpAfterError = false;
    this._showSuggestionAfterError = true;

    // see .configureOutput() for docs
    this._outputConfiguration = {
      writeOut: (str) => process.stdout.write(str),
      writeErr: (str) => process.stderr.write(str),
      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,
      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,
      outputError: (str, write) => write(str)
    };

    this._hidden = false;
    this._hasHelpOption = true;
    this._helpFlags = '-h, --help';
    this._helpDescription = 'display help for command';
    this._helpShortFlag = '-h';
    this._helpLongFlag = '--help';
    this._addImplicitHelpCommand = undefined; // D