    wasmHistogram.recordValueWithExpectedInterval(n, 1000);
            });
            const js = jsHistogram.getValueAtPercentile(90);
            const wasm = wasmHistogram.getValueAtPercentile(90);
            const relativeError = Math.abs(1 - js / wasm);
            const variation = Math.pow(10, -3);
            if (relativeError >= variation) {
                console.log({ js, wasm });
            }
            return relativeError < variation;
        }), runnerOptions);
    });
});
describe("Histogram encoding/decoding", () => {
    beforeAll(wasm_1.initWebAssembly);
    const numberOfSignificantValueDigits = 3;
    [true, false].forEach((useWebAssembly) => [8, 16, 32, 64, "packed"].forEach((bitBucketSize) => {
        it(`Histogram ${bit