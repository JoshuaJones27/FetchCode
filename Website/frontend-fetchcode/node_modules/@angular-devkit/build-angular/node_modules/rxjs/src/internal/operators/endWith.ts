operty */:
                            bindExportsPropertyAssignment(node);
                            break;
                        case 2 /* ModuleExports */:
                            bindModuleExportsAssignment(node);
                            break;
                        case 3 /* PrototypeProperty */:
                            bindPrototypePropertyAssignment(node.left, node);
                            break;
                        case 6 /* Prototype */:
                            bindPrototypeAssignment(node);
                            break;
                        case 4 /* ThisProperty */:
                            bindThisPropertyAssignment(node);
                            break;
                        case 5 /* Property */:
                            var expression = node.left.expression;
                            if (ts.isInJSFile(node) && ts.isIdentifier(expression)) {
                                var symbol = lookupSymbolForName(blockScopeContainer, expression.escapedText);
                                if (ts.isThisInitializedDeclaration(symbol === null || symbol === void 0 ? void 0 : symbol.valueDeclaration)) {
                                    bindThisPropertyAssignment(node);
                                    break;
                                }
                            }
                            bindSpecialPropertyAssignment(node);
                            break;
                        case 0 /* None */:
                            // Nothing to do
                            break;
                        default:
                            ts.Debug.fail("Unknown binary expression special property assignment kind");
                    }
                    return checkStrictModeBinaryExpression(node);
                case 291 /* CatchClause */:
                    return checkStrictModeCatchClause(node);
                case 214 /* DeleteExpression */:
                    return checkStrictModeDeleteExpression(node);
                case 8 /* NumericLiteral */:
                    return checkStrictModeNumericLiteral(node);
                case 219 /* PostfixUnaryExpression */:
                    return checkStrictModePostfixUnaryExpression(node);
                case 218 /* PrefixUnaryExpression */:
                    return checkStrictModePrefixUnaryExpression(node);
                case 247 /* WithStatement */:
                    return checkStrictModeWithStatement(node);
                case 249 /* LabeledStatement */:
                    return checkStrictModeLabeledStatement(node);
                case 191 /* ThisType */:
                    seenThisKeyword = true;
                    return;
                case 176 /* TypePredicate */:
                    break; // Binding the children will handle everything
                case 162 /* TypeParameter */:
                    return bindTypeParameter(node);
                case 163 /* Parameter */:
                    return bindParameter(node);
                case 253 /* VariableDeclaration */:
                    return bindVariableDeclarationOrBindingElement(node);
                case 202 /* BindingElement */:
                    node.flowNode = currentFlow;
                    return bindVariableDeclarationOrBindingElement(node);
                case 166 /* PropertyDeclaration */:
                case 165 /* PropertySignature */:
                    return bindPropertyWorker(node);
                case 294 /* PropertyAssignment */:
                case 295 /* ShorthandPropertyAssignment */:
                    return bindPropertyOrMethodOrAccessor(node, 4 /* Property */, 0 /* PropertyExcludes */);
                case 297 /* EnumMember */:
                    return bindPropertyOrMethodOrAccessor(node, 8 /* EnumMember */, 900095 /* EnumMemberExcludes */);
                case 173 /* CallSignature */:
                case 174 /* ConstructSignature */:
                case 175 /* IndexSignature */:
                    return declareSymbolAndAddToSymbolTable(node, 131072 /* Signature */, 0 /* None */);
                case 168 /* MethodDeclaration */:
    