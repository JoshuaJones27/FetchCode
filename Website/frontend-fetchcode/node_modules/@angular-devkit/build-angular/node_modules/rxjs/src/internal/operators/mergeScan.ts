           var related = ts.createDiagnosticForNode(location, ts.Diagnostics.Did_you_forget_to_use_await);
                ts.addRelatedInfo(diagnostic, related);
            }
            return diagnostic;
        }
        function addDeprecatedSuggestionWorker(declarations, diagnostic) {
            var deprecatedTag = Array.isArray(declarations) ? ts.forEach(declarations, ts.getJSDocDeprecatedTag) : ts.getJSDocDeprecatedTag(declarations);
            if (deprecatedTag) {
                ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(deprecatedTag, ts.Diagnostics.The_declaration_was_marked_as_deprecated_here));
            }
            // We call `addRelatedInfo()` before adding the diagnostic to prevent duplicates.
            suggestionDiagnostics.add(diagnostic);
            return diagnostic;
        }
        function isDeprecatedSymbol(symbol) {
            return !!(getDeclarationNodeFlagsFromSymbol(symbol) & 134217728 /* Deprecated */);
        }
        function addDeprecatedSuggestion(location, declarations, deprecatedEntity) {
            var diagnostic = ts.createDiagnosticForNode(location, ts.Diagnostics._0_is_deprecated, deprecatedEntity);
            return addDeprecatedSuggestionWorker(declarations, diagnostic);
        }
        function addDeprecatedSuggestionWithSignature(location, declaration, deprecatedEntity, signatureString) {
            var diagnostic = deprecatedEntity
                ? ts.createDiagnosticForNode(location, ts.Diagnostics.The_signature_0_of_1_is_deprecated, signatureString, deprecatedEntity)
                : ts.createDiagnosticForNode(location, ts.Diagnostics._0_is_deprecated, signatureString);
            return addDeprecatedSuggestionWorker(declaration, diagnostic);
        }
        function createSymbol(flags, name, checkFlags) {
            symbolCount++;
            var symbol = new Symbol(flags | 33554432 /* Transient */, name);
            symbol.checkFlags = checkFlags || 0;
            return symbol;
        }
        function getExcludedSymbolFlags(flags) {
            var result = 0;
            if (flags & 2 /* BlockScopedVariable */)
                result |= 111551 /* BlockScopedVariableExcludes */;
            if (flags & 1 /* FunctionScopedVariable */)
                result |= 111550 /* FunctionScopedVariableExcludes */;
            if (flags & 4 /* Property */)
                result |= 0 /* PropertyExcludes */;
            if (flags & 8 /* EnumMember */)
                result |= 900095 /* EnumMemberExcludes */;
            if (flags & 16 /* Function */)
                result |= 110991 /* FunctionExcludes */;
            if (flags & 32 /* Class */)
                result |= 899503 /* ClassExcludes */;
            if (flags & 64 /* Interface */)
                result |= 788872 /* InterfaceExcludes */;
            if (flags & 256 /* RegularEnum */)
                result |= 899327 /* RegularEnumExcludes */;
            if (flags & 128 /* ConstEnum */)
                result |= 899967 /* ConstEnumExcludes */;
            if (flags & 512 /* ValueModule */)
                result |= 110735 /* ValueModuleExcludes */;
            if (flags & 8192 /* Method */)
                result |= 103359 /* MethodExcludes */;
            if (flags & 32768 /* GetAccessor */)
                result |= 46015 /* GetAccessorExcludes */;
            if (flags & 65536 /* SetAccessor */)
                result |= 78783 /* SetAccessorExcludes */;
            if (flags & 262144 /* TypeParameter */)
                result |= 526824 /* TypeParameterExcludes */;
            if (flags & 524288 /* TypeAlias */)
                result |= 788968 /* TypeAliasExcludes */;
            if (flags & 2097152 /* Alias */)
                result |= 2097152 /* AliasExcludes */;
            return result;
        }
        function recordMergedSymbol(target, source) {
            if (!source.mergeId) {
                source.mergeId = nextMergeId;
                nextMergeId++;
            }
            mergedSymbols[source.mergeId] = target;
        }
        function cloneSymbol(symbol) {
            var result = createSymbol(symbol.flags, symbol.escapedName);
            result.declarations = symbol.declarations ? symbol.declarations.slice() : [];
            result.parent = symbol.parent;
            if (symbol.valueDeclaration)
                result.valueDeclaration = symbol.valueDeclaration;
            if (symbol.constEnumOnlyModule)
                result.constEnumOnlyModule = true;
            if (symbol.members)
                result.members = new ts.Map(symbol.members);
            if (symbol.exports)
                result.exports = new ts.Map(symbol.exports);
            recordMergedSymbol(result, symbol);
            return resul